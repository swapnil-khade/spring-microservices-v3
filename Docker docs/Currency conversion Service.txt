												currency-conversion-microservice  
								
												
						API GATEWAY		---->		Load Balancer 	---->    Naming Server or Service Registry
								
								
		currency-exchange-microservice 1		currency-exchange-microservice 2		currency-exchange-microservice 3





currency-conversion-microservice  
	spring-boot-starter-web															@SpringBootApplication
	spring-boot-starter-actuator													@EnableFeignClients
	spring-boot-devtools
	spring-cloud-starter-config	[to connect to spring cloud config server]							[client side load balancing]
	spring-cloud-starter-openfeign		[161]										@FeignClient(name="currency-exchange") 		on interface CurrencyExchangeProxy
	spring-cloud-starter-netflix-eureka-client							eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
		-spring-cloud-starter-loadbalancer
	spring-boot-starter-aop
	resilience4j-spring-boot2
	
	
		//@Retry(name = "sample-api", fallbackMethod = "hardcodedResponse")					It takes parameter of throwable 
					resilience4j.retry.instances.sample-api.enableExponentialBackoff=true
		//@CircuitBreaker(name = "default", fallbackMethod = "hardcodedResponse")
					resilience4j.circuitbreaker.instances.default.failureRateThreshold=90
		//@RateLimiter(name="default")
					resilience4j.ratelimiter.instances.default.limitForPeriod=2
					resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s		2 calls are allowed in 10s
		@Bulkhead(name="sample-api")
					resilience4j.bulkhead.instances.default.maxConcurrentCalls=10
					resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10
		
		
			circuit breaker states    initially   					closed       open
													
																		half-open
	
	micrometer-observation																	micrometer assigns ID to specific request 
	micrometer-tracing-bridge-otel
	opentelemetry-exporter-zipkin
		management.tracing.sampling.probability=1.0
		logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

	feign-micrometer		[140]																for spring boot 3.X

	
	
naming-server			@EnableEurekaServer
	spring-boot-starter-actuator
	spring-cloud-starter-config
	spring-cloud-starter-netflix-eureka-server
	spring-boot-devtools
	


currency-exchange-microservice 	
	spring-boot-starter-web
	spring-boot-starter-actuator
	spring-boot-devtools
	spring-cloud-starter-config	[to connect to spring cloud config server]
	spring-cloud-starter-netflix-eureka-client							eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
	

api-gateway				[to invoke common features, cross cutting concerns, authentication, rate limiting, and caching. ]
	spring-boot-starter-actuator
	spring-boot-devtools
	spring-cloud-starter-config
	spring-cloud-starter-gateway
	spring-cloud-starter-netflix-eureka-client
	
	spring.cloud.gateway.discovery.locator.enabled=true												do not use for custom routes 
	
http://localhost:8765/CURRENCY-CONVERSION/currency-conversion-feign/from/USD/to/INR/quantity/10
	spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true

http://localhost:8765/currency-conversion/currency-conversion-feign/from/USD/to/INR/quantity/10

http://localhost:8765/currency-conversion-feign/from/USD/to/INR/quantity/10


	@Configuration
	public class ApiGatewayConfiguration					we can also rewrite path using .filter( f -> f.rewritePath()
	
	@Component
	public class LoggingFilter implements GlobalFilter		log every request that goes through api gateway/ can implement authentication here
	
	spring cloud gateway is built on top of webflux ( Reactive approach )
	
	
	
	
	
	
	api gateway 			ccm				cem
	
	
				distributed tracing server 
				
				
						database